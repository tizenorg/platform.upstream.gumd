/*
 * Generated by gdbus-codegen 2.32.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GUM_DBUS_USER_SERVICE_GEN_H__
#define __GUM_DBUS_USER_SERVICE_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.tizen.SecurityAccounts.gUserManagement.UserService */

#define GUM_DBUS_TYPE_USER_SERVICE (gum_dbus_user_service_get_type ())
#define GUM_DBUS_USER_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_USER_SERVICE, GumDbusUserService))
#define GUM_DBUS_IS_USER_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_USER_SERVICE))
#define GUM_DBUS_USER_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GUM_DBUS_TYPE_USER_SERVICE, GumDbusUserServiceIface))

struct _GumDbusUserService;
typedef struct _GumDbusUserService GumDbusUserService;
typedef struct _GumDbusUserServiceIface GumDbusUserServiceIface;

struct _GumDbusUserServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_create_new_user) (
    GumDbusUserService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_user) (
    GumDbusUserService *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid);

  gboolean (*handle_get_user_by_name) (
    GumDbusUserService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username);

  void (*user_added) (
    GumDbusUserService *object,
    guint arg_uid);

  void (*user_deleted) (
    GumDbusUserService *object,
    guint arg_uid);

  void (*user_updated) (
    GumDbusUserService *object,
    guint arg_uid);

};

GType gum_dbus_user_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gum_dbus_user_service_interface_info (void);
guint gum_dbus_user_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gum_dbus_user_service_complete_create_new_user (
    GumDbusUserService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);

void gum_dbus_user_service_complete_get_user (
    GumDbusUserService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);

void gum_dbus_user_service_complete_get_user_by_name (
    GumDbusUserService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);



/* D-Bus signal emissions functions: */
void gum_dbus_user_service_emit_user_added (
    GumDbusUserService *object,
    guint arg_uid);

void gum_dbus_user_service_emit_user_deleted (
    GumDbusUserService *object,
    guint arg_uid);

void gum_dbus_user_service_emit_user_updated (
    GumDbusUserService *object,
    guint arg_uid);



/* D-Bus method calls: */
void gum_dbus_user_service_call_create_new_user (
    GumDbusUserService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_user_service_call_create_new_user_finish (
    GumDbusUserService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_user_service_call_create_new_user_sync (
    GumDbusUserService *proxy,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_user_service_call_get_user (
    GumDbusUserService *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_user_service_call_get_user_finish (
    GumDbusUserService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_user_service_call_get_user_sync (
    GumDbusUserService *proxy,
    guint arg_uid,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_user_service_call_get_user_by_name (
    GumDbusUserService *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_user_service_call_get_user_by_name_finish (
    GumDbusUserService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_user_service_call_get_user_by_name_sync (
    GumDbusUserService *proxy,
    const gchar *arg_username,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GUM_DBUS_TYPE_USER_SERVICE_PROXY (gum_dbus_user_service_proxy_get_type ())
#define GUM_DBUS_USER_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_USER_SERVICE_PROXY, GumDbusUserServiceProxy))
#define GUM_DBUS_USER_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GUM_DBUS_TYPE_USER_SERVICE_PROXY, GumDbusUserServiceProxyClass))
#define GUM_DBUS_USER_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GUM_DBUS_TYPE_USER_SERVICE_PROXY, GumDbusUserServiceProxyClass))
#define GUM_DBUS_IS_USER_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_USER_SERVICE_PROXY))
#define GUM_DBUS_IS_USER_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GUM_DBUS_TYPE_USER_SERVICE_PROXY))

typedef struct _GumDbusUserServiceProxy GumDbusUserServiceProxy;
typedef struct _GumDbusUserServiceProxyClass GumDbusUserServiceProxyClass;
typedef struct _GumDbusUserServiceProxyPrivate GumDbusUserServiceProxyPrivate;

struct _GumDbusUserServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GumDbusUserServiceProxyPrivate *priv;
};

struct _GumDbusUserServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType gum_dbus_user_service_proxy_get_type (void) G_GNUC_CONST;

void gum_dbus_user_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GumDbusUserService *gum_dbus_user_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GumDbusUserService *gum_dbus_user_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gum_dbus_user_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GumDbusUserService *gum_dbus_user_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GumDbusUserService *gum_dbus_user_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GUM_DBUS_TYPE_USER_SERVICE_SKELETON (gum_dbus_user_service_skeleton_get_type ())
#define GUM_DBUS_USER_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_USER_SERVICE_SKELETON, GumDbusUserServiceSkeleton))
#define GUM_DBUS_USER_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GUM_DBUS_TYPE_USER_SERVICE_SKELETON, GumDbusUserServiceSkeletonClass))
#define GUM_DBUS_USER_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GUM_DBUS_TYPE_USER_SERVICE_SKELETON, GumDbusUserServiceSkeletonClass))
#define GUM_DBUS_IS_USER_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_USER_SERVICE_SKELETON))
#define GUM_DBUS_IS_USER_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GUM_DBUS_TYPE_USER_SERVICE_SKELETON))

typedef struct _GumDbusUserServiceSkeleton GumDbusUserServiceSkeleton;
typedef struct _GumDbusUserServiceSkeletonClass GumDbusUserServiceSkeletonClass;
typedef struct _GumDbusUserServiceSkeletonPrivate GumDbusUserServiceSkeletonPrivate;

struct _GumDbusUserServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GumDbusUserServiceSkeletonPrivate *priv;
};

struct _GumDbusUserServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gum_dbus_user_service_skeleton_get_type (void) G_GNUC_CONST;

GumDbusUserService *gum_dbus_user_service_skeleton_new (void);


G_END_DECLS

#endif /* __GUM_DBUS_USER_SERVICE_GEN_H__ */
