/*
 * Generated by gdbus-codegen 2.32.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GUM_DBUS_GROUP_SERVICE_GEN_H__
#define __GUM_DBUS_GROUP_SERVICE_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.tizen.SecurityAccounts.gUserManagement.GroupService */

#define GUM_DBUS_TYPE_GROUP_SERVICE (gum_dbus_group_service_get_type ())
#define GUM_DBUS_GROUP_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_GROUP_SERVICE, GumDbusGroupService))
#define GUM_DBUS_IS_GROUP_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_GROUP_SERVICE))
#define GUM_DBUS_GROUP_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GUM_DBUS_TYPE_GROUP_SERVICE, GumDbusGroupServiceIface))

struct _GumDbusGroupService;
typedef struct _GumDbusGroupService GumDbusGroupService;
typedef struct _GumDbusGroupServiceIface GumDbusGroupServiceIface;

struct _GumDbusGroupServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_create_new_group) (
    GumDbusGroupService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_group) (
    GumDbusGroupService *object,
    GDBusMethodInvocation *invocation,
    guint arg_gid);

  gboolean (*handle_get_group_by_name) (
    GumDbusGroupService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_groupname);

  void (*group_added) (
    GumDbusGroupService *object,
    guint arg_gid);

  void (*group_deleted) (
    GumDbusGroupService *object,
    guint arg_gid);

  void (*group_updated) (
    GumDbusGroupService *object,
    guint arg_gid);

};

GType gum_dbus_group_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gum_dbus_group_service_interface_info (void);
guint gum_dbus_group_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gum_dbus_group_service_complete_create_new_group (
    GumDbusGroupService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);

void gum_dbus_group_service_complete_get_group (
    GumDbusGroupService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);

void gum_dbus_group_service_complete_get_group_by_name (
    GumDbusGroupService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);



/* D-Bus signal emissions functions: */
void gum_dbus_group_service_emit_group_added (
    GumDbusGroupService *object,
    guint arg_gid);

void gum_dbus_group_service_emit_group_deleted (
    GumDbusGroupService *object,
    guint arg_gid);

void gum_dbus_group_service_emit_group_updated (
    GumDbusGroupService *object,
    guint arg_gid);



/* D-Bus method calls: */
void gum_dbus_group_service_call_create_new_group (
    GumDbusGroupService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_service_call_create_new_group_finish (
    GumDbusGroupService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_service_call_create_new_group_sync (
    GumDbusGroupService *proxy,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_group_service_call_get_group (
    GumDbusGroupService *proxy,
    guint arg_gid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_service_call_get_group_finish (
    GumDbusGroupService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_service_call_get_group_sync (
    GumDbusGroupService *proxy,
    guint arg_gid,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_group_service_call_get_group_by_name (
    GumDbusGroupService *proxy,
    const gchar *arg_groupname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_service_call_get_group_by_name_finish (
    GumDbusGroupService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_service_call_get_group_by_name_sync (
    GumDbusGroupService *proxy,
    const gchar *arg_groupname,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GUM_DBUS_TYPE_GROUP_SERVICE_PROXY (gum_dbus_group_service_proxy_get_type ())
#define GUM_DBUS_GROUP_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_GROUP_SERVICE_PROXY, GumDbusGroupServiceProxy))
#define GUM_DBUS_GROUP_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GUM_DBUS_TYPE_GROUP_SERVICE_PROXY, GumDbusGroupServiceProxyClass))
#define GUM_DBUS_GROUP_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GUM_DBUS_TYPE_GROUP_SERVICE_PROXY, GumDbusGroupServiceProxyClass))
#define GUM_DBUS_IS_GROUP_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_GROUP_SERVICE_PROXY))
#define GUM_DBUS_IS_GROUP_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GUM_DBUS_TYPE_GROUP_SERVICE_PROXY))

typedef struct _GumDbusGroupServiceProxy GumDbusGroupServiceProxy;
typedef struct _GumDbusGroupServiceProxyClass GumDbusGroupServiceProxyClass;
typedef struct _GumDbusGroupServiceProxyPrivate GumDbusGroupServiceProxyPrivate;

struct _GumDbusGroupServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GumDbusGroupServiceProxyPrivate *priv;
};

struct _GumDbusGroupServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType gum_dbus_group_service_proxy_get_type (void) G_GNUC_CONST;

void gum_dbus_group_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GumDbusGroupService *gum_dbus_group_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GumDbusGroupService *gum_dbus_group_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gum_dbus_group_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GumDbusGroupService *gum_dbus_group_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GumDbusGroupService *gum_dbus_group_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GUM_DBUS_TYPE_GROUP_SERVICE_SKELETON (gum_dbus_group_service_skeleton_get_type ())
#define GUM_DBUS_GROUP_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_GROUP_SERVICE_SKELETON, GumDbusGroupServiceSkeleton))
#define GUM_DBUS_GROUP_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GUM_DBUS_TYPE_GROUP_SERVICE_SKELETON, GumDbusGroupServiceSkeletonClass))
#define GUM_DBUS_GROUP_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GUM_DBUS_TYPE_GROUP_SERVICE_SKELETON, GumDbusGroupServiceSkeletonClass))
#define GUM_DBUS_IS_GROUP_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_GROUP_SERVICE_SKELETON))
#define GUM_DBUS_IS_GROUP_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GUM_DBUS_TYPE_GROUP_SERVICE_SKELETON))

typedef struct _GumDbusGroupServiceSkeleton GumDbusGroupServiceSkeleton;
typedef struct _GumDbusGroupServiceSkeletonClass GumDbusGroupServiceSkeletonClass;
typedef struct _GumDbusGroupServiceSkeletonPrivate GumDbusGroupServiceSkeletonPrivate;

struct _GumDbusGroupServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GumDbusGroupServiceSkeletonPrivate *priv;
};

struct _GumDbusGroupServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gum_dbus_group_service_skeleton_get_type (void) G_GNUC_CONST;

GumDbusGroupService *gum_dbus_group_service_skeleton_new (void);


G_END_DECLS

#endif /* __GUM_DBUS_GROUP_SERVICE_GEN_H__ */
