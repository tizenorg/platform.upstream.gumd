/*
 * Generated by gdbus-codegen 2.32.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GUM_DBUS_GROUP_GEN_H__
#define __GUM_DBUS_GROUP_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.tizen.SecurityAccounts.gUserManagement.Group */

#define GUM_DBUS_TYPE_GROUP (gum_dbus_group_get_type ())
#define GUM_DBUS_GROUP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_GROUP, GumDbusGroup))
#define GUM_DBUS_IS_GROUP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_GROUP))
#define GUM_DBUS_GROUP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GUM_DBUS_TYPE_GROUP, GumDbusGroupIface))

struct _GumDbusGroup;
typedef struct _GumDbusGroup GumDbusGroup;
typedef struct _GumDbusGroupIface GumDbusGroupIface;

struct _GumDbusGroupIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_group) (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation,
    guint arg_preferred_gid);

  gboolean (*handle_add_member) (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid,
    gboolean arg_add_as_admin);

  gboolean (*handle_delete_group) (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_delete_member) (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid);

  gboolean (*handle_update_group) (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation);

  guint  (*get_gid) (GumDbusGroup *object);

  const gchar * (*get_groupname) (GumDbusGroup *object);

  guint16  (*get_grouptype) (GumDbusGroup *object);

  const gchar * (*get_secret) (GumDbusGroup *object);

  void (*unregistered) (
    GumDbusGroup *object);

};

GType gum_dbus_group_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gum_dbus_group_interface_info (void);
guint gum_dbus_group_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gum_dbus_group_complete_add_group (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation,
    guint gid);

void gum_dbus_group_complete_delete_group (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation);

void gum_dbus_group_complete_update_group (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation);

void gum_dbus_group_complete_add_member (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation);

void gum_dbus_group_complete_delete_member (
    GumDbusGroup *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gum_dbus_group_emit_unregistered (
    GumDbusGroup *object);



/* D-Bus method calls: */
void gum_dbus_group_call_add_group (
    GumDbusGroup *proxy,
    guint arg_preferred_gid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_call_add_group_finish (
    GumDbusGroup *proxy,
    guint *out_gid,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_call_add_group_sync (
    GumDbusGroup *proxy,
    guint arg_preferred_gid,
    guint *out_gid,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_group_call_delete_group (
    GumDbusGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_call_delete_group_finish (
    GumDbusGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_call_delete_group_sync (
    GumDbusGroup *proxy,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_group_call_update_group (
    GumDbusGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_call_update_group_finish (
    GumDbusGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_call_update_group_sync (
    GumDbusGroup *proxy,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_group_call_add_member (
    GumDbusGroup *proxy,
    guint arg_uid,
    gboolean arg_add_as_admin,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_call_add_member_finish (
    GumDbusGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_call_add_member_sync (
    GumDbusGroup *proxy,
    guint arg_uid,
    gboolean arg_add_as_admin,
    GCancellable *cancellable,
    GError **error);

void gum_dbus_group_call_delete_member (
    GumDbusGroup *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gum_dbus_group_call_delete_member_finish (
    GumDbusGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gum_dbus_group_call_delete_member_sync (
    GumDbusGroup *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint16 gum_dbus_group_get_grouptype (GumDbusGroup *object);
void gum_dbus_group_set_grouptype (GumDbusGroup *object, guint16 value);

guint gum_dbus_group_get_gid (GumDbusGroup *object);
void gum_dbus_group_set_gid (GumDbusGroup *object, guint value);

const gchar *gum_dbus_group_get_groupname (GumDbusGroup *object);
gchar *gum_dbus_group_dup_groupname (GumDbusGroup *object);
void gum_dbus_group_set_groupname (GumDbusGroup *object, const gchar *value);

const gchar *gum_dbus_group_get_secret (GumDbusGroup *object);
gchar *gum_dbus_group_dup_secret (GumDbusGroup *object);
void gum_dbus_group_set_secret (GumDbusGroup *object, const gchar *value);


/* ---- */

#define GUM_DBUS_TYPE_GROUP_PROXY (gum_dbus_group_proxy_get_type ())
#define GUM_DBUS_GROUP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_GROUP_PROXY, GumDbusGroupProxy))
#define GUM_DBUS_GROUP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GUM_DBUS_TYPE_GROUP_PROXY, GumDbusGroupProxyClass))
#define GUM_DBUS_GROUP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GUM_DBUS_TYPE_GROUP_PROXY, GumDbusGroupProxyClass))
#define GUM_DBUS_IS_GROUP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_GROUP_PROXY))
#define GUM_DBUS_IS_GROUP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GUM_DBUS_TYPE_GROUP_PROXY))

typedef struct _GumDbusGroupProxy GumDbusGroupProxy;
typedef struct _GumDbusGroupProxyClass GumDbusGroupProxyClass;
typedef struct _GumDbusGroupProxyPrivate GumDbusGroupProxyPrivate;

struct _GumDbusGroupProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GumDbusGroupProxyPrivate *priv;
};

struct _GumDbusGroupProxyClass
{
  GDBusProxyClass parent_class;
};

GType gum_dbus_group_proxy_get_type (void) G_GNUC_CONST;

void gum_dbus_group_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GumDbusGroup *gum_dbus_group_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GumDbusGroup *gum_dbus_group_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gum_dbus_group_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GumDbusGroup *gum_dbus_group_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GumDbusGroup *gum_dbus_group_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GUM_DBUS_TYPE_GROUP_SKELETON (gum_dbus_group_skeleton_get_type ())
#define GUM_DBUS_GROUP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GUM_DBUS_TYPE_GROUP_SKELETON, GumDbusGroupSkeleton))
#define GUM_DBUS_GROUP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GUM_DBUS_TYPE_GROUP_SKELETON, GumDbusGroupSkeletonClass))
#define GUM_DBUS_GROUP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GUM_DBUS_TYPE_GROUP_SKELETON, GumDbusGroupSkeletonClass))
#define GUM_DBUS_IS_GROUP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GUM_DBUS_TYPE_GROUP_SKELETON))
#define GUM_DBUS_IS_GROUP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GUM_DBUS_TYPE_GROUP_SKELETON))

typedef struct _GumDbusGroupSkeleton GumDbusGroupSkeleton;
typedef struct _GumDbusGroupSkeletonClass GumDbusGroupSkeletonClass;
typedef struct _GumDbusGroupSkeletonPrivate GumDbusGroupSkeletonPrivate;

struct _GumDbusGroupSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GumDbusGroupSkeletonPrivate *priv;
};

struct _GumDbusGroupSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gum_dbus_group_skeleton_get_type (void) G_GNUC_CONST;

GumDbusGroup *gum_dbus_group_skeleton_new (void);


G_END_DECLS

#endif /* __GUM_DBUS_GROUP_GEN_H__ */
